(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{642:function(t,a,s){"use strict";s.r(a);var h=s(6),e=Object(h.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("hash表的实现原理")])]),s("h2",{attrs:{id:"哈希表-hash-table-也叫散列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希表-hash-table-也叫散列表"}},[t._v("#")]),t._v(" 哈希表（Hash table，也叫散列表）")]),t._v(" "),s("p",[t._v("所谓hash表，就是以 键-值(key-indexed) 的形式存储的数据结构。可以根据key来快速的查找到value。也就是说，它通过把key值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表")]),t._v(" "),s("h2",{attrs:{id:"_1-hash表怎么存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-hash表怎么存储"}},[t._v("#")]),t._v(" 1.hash表怎么存储")]),t._v(" "),s("p",[t._v("hash表把key通过hash函数转化成一个特定的整数，然后与数组的长度取余，取余结果（hash值）当做该数组的下标，然后将value存储在意该下标中。 hash(key)%len。")]),t._v(" "),s("p",[t._v("根据上面的原理，首先，我们要分配一片空间用来存储我们数据，比如是一个空的数组\n"),s("img",{attrs:{src:"/hash1.png",alt:""}}),t._v("\n然后，有数据存进来的时候，按照特定规则得出这个数据在数组中的位置，将数据存进这个位置")]),t._v(" "),s("p",[t._v("我们就以存进一个整型数据为例，特定规则就是取余\n"),s("img",{attrs:{src:"/hash2.png",alt:""}}),t._v("\n根据计算出来的值，将这些数据放入对应的位置，我们的数组变为\n"),s("img",{attrs:{src:"/hash3.png",alt:""}}),t._v("\n然而，当查询hash表时，只要按照取余规则计算出这个数据在数组中对应的位置，然后查看数组的这个位置，就可以取出这个数据了，比如我们要从哈希表中取出52，根据取余规则，52的计算出来的位置是8，数组中8这个位置是空的，52不在哈希表中，找不到52的数据；从哈希表中取出77，77计算出来的位置是0，数组中0这个位置有值，而且值就是77，从哈希表中取出77的值。\n————————————————")]),t._v(" "),s("p",[t._v("原文链接：https://blog.csdn.net/weixin_44799198/article/details/119937110")])])}),[],!1,null,null,null);a.default=e.exports}}]);